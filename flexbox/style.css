body {
  background-color: pink;
}

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

.menu-container {
  display: flex;              /*makes everything nested in this div, flex or a flex item as it were, and it is called a flex container*/
  justify-content: center;    
  /* this tells us how to align the items in the flex container -- notice how we are defining properties of the children in the style of the parent!!! This is a bit of a feature for flexbox 
  you can also use positions flex-start and flex-end, space-around and space-between*/
  color: #fff;
  background-color: #5995DA;  /* Blue */
  padding: 20px 0;
}

.menu {
  border: 1px solid #fff;  /* For debugging */
  width: 900px;
  border: 1px solid #fff;
  width: 900px;
  display: flex;
  padding: 5px;
  justify-content: space-between;
  /*the space-around and space-between positions only work when there are multiple items. .menu-container only has one child, .menu. But .menu has 3 children, the date,s ignup and login.*/
  /*Flex containers only know how to position elements that are one level deep (i.e., their child elements).*/
}

.links {
  /*now that links has been created as a div inside menu we can make it flex too and then 2 of the 3 menu items can be styled differently*/
  display: flex;
  justify-content: flex-end;
}

.login {
  margin-left: 20px;
}

.header-container {
  color: #5995DA;
  background-color: #D6E9FE;
  display: flex;
  justify-content: center;
}

.header {
  align-items: center;
  /* in order to align the items vertically you just need the display: flex in the parent and align items: center in the child */
  /* for align-items: stretch see below */
  width: 900px;
  height: 300px;
  display: flex;
  justify-content: space-between;
}

.social,
.logo,
.subscribe {
  border: 1px solid #5995DA;
  /* with the border you can see what align items:stretch does, v useful for: The box for each item extends the full height of the flex container, regardless of how much content it contains. A common use case for this behavior is creating equal-height columns with a variable amount of content in each one—something very difficult to do with floats. */
  /* to do this change the parent (header) to align-items: stretch */
}


.photo-grid-container {
  display: flex;
  justify-content: center;
}

.photo-grid {
  flex-wrap: wrap;
  /* without this the photos flow off the edge of the page */
  justify-content: center;    /* without this the wrapped items are not centered they justify to the left by default */
  width: 900px;
  display: flex;
  /* flex-direction: column; */
  /* default val is row */
  align-items: center;      /* if flex-direction is column, it has effectively rotated the direcion of the container, so instead of doing the vertiacal alignment (for defualt or row flex direction) align-items now does the horizontal alignment */
  /* flex-direction: row-reverse; */
  /* this is super cool and can be column reverse too.. It just reorders the elements that are in that row... */
  flex-direction: row /*this is the default*/
}

.photo-grid-item {
  border: 1px solid #fff;
  width: 300px;
  height: 300px;
}

.first-item {
  /* order: -1; */
  /* default is 0, so increasing to 1 moves item to far right */
}

.second-item {
  /* order: 1; */
}


.third-item {
  order: -1;
}

.last-item {
  /* order: -1; */
  /* default is 0, so decreasing to -1 moves item to far left */
}

/* align self overrides the align-items value from the container-parent */
.social,
.subscribe {
  align-self: flex-end;
  margin-bottom: 20px;
}


/* flexbox can change the way that items fill theor containers using flex: The following is a footer container with 3 footer-items inside they all have the class footer-item but also have individual class names too*/

.footer {
  display: flex;
  justify-content: space-between;
}

.footer-item {
  border: 1px solid #fff;
  background-color: #D6E9FE;
  height: 200px;
  flex: 1;
  /* this line says all the footer items have the same weight so they should flex to fill the container equally */
}
/* this flex 2 tells us actually make footer 3 weigh twice as much as the others (take up twice as much room as them alone). Note you need to have the flex: 1 on them all to start with too */
/* OR you could do it by individually putting the flex weight on each class */

/* this simply overrides the weight for the footer-three because it comes later in the css file */
.footer-three {
  flex: 2;
}

/* flex initial allows you to ignore flex rules and have a fixed width among your flexible items */
/* obviosly the fixed width items do not resize with screen size */
.footer-one,
.footer-three {
  background-color: #5995DA;
  flex: initial;
  width: 300px;
}

/* if we get rid of links in the html so that signup, login and date are all on the same nesting level, we can see what auto margins do in flexbox. */
.signup {
  margin-left: auto;
}
/* Auto-margins in flexbox are special. They can be used as an alternative to an extra <div> when trying to align a group of items to the left/right of a container. Think of auto-margins as a “divider” for flex items in the same container. */
/* Auto-margins eat up all the extra space in a flex container, so instead of distributing items equally, this moves the .signup and any following items (.login) to the right side of the container. This will give you the exact same layout we had before, but without that extra nested <div> to group them. Sometimes, it’s nice to keep your HTML flatter. */
/* This is the most complex thing in flexbox so far as it is non-intuitive */


